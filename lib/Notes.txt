- Business Logic Component - BLoC
- Have to write more code than Riverpod or Prodivder, but makes business logic simple
- Event: info about action
- State: reaction to info given by action
- UI (throws events), Bloc (throws states), Repository, Data Source
- Any function with async will always return Future
- Flutter is single-threaded

-
UI/Presentation sends event to Bloc
Bloc sends async request to Data
(Behind Data, there will be Repository)
Data returns async response to Bloc
Bloc returns states to UI/Presentation

- Streamcontroller used for getting continuously updated data (e.g. stock market values)
- http, equatable
- fromJosn method used to convert JSON to Dart
- toJson method used to convert Dart to Json
- Convert string to JSON to Dart
- Make API file separate because makes testign and changing easy
- Repository takes data from Data Stroage and gives to Bloc
- ApiClients can be different in different repositories but each respository will be in same User_repo.dart file.

- user_events.dart:
    Equatable used to render state ONLY when event changes.
    UserEvent is an abstract class (cannot define its instance, but used to define same traits uniquely for each class).

- user_states.dart:
    UserState is an abstract class.
    Total states: empty, success (loaded), error, loading; these will all be separate classes extending UserState

- user_bloc.dart:
    UserBloc extends Bloc<UserEvent, UserState>.
    Has instance of UserRepository.

- TDD is writing where function will be called and then defining function later.

- user_page.dart:
    initState should be defined.
    FetchUser() is the event.
    Blockbuilder builds/renders widget for each state

- Must wrap main app into BlockProvider

- Folders: bloc > user_events.dart+user_states.dart+user_bloc.dart, core > network.dart + respository > user_repo.dart, models > user_model.dart, page

- Developer's testing responsibilities:
Develops business logic
Write test cases alongside writing code
You will get to know new arising errors in previous features when new feature added
Unit testing: wrote class, ensure it is working properly; beckend system not integrated, uses mock data
Widget testing: done on widget, ensuring UI works/displayed properly on different screen sizes; beckend system not integrated, uses mock data
Integration test: run like someone is using app, backend is connected

- QA's testing responsibilities:
Ensures quality of app
Functional testing

- Selenium does automated testing in web

- Test files should end with _test.dart
- testWidget:
    descripton: Tescase ka naam; tells what the test is for
    pumpWidget: awaits until UI is rendered
    pumpAndSettle: awaits until UI is rendered and all asyncs inside it are rendered as well

- Golden Toolkit package

- Golden test/Screenshot testing:
    tell which devices to check on,
    tell which widget to test on and you can add multiple of these and give each test a name
    pumpDeviceBuilder: builds app on device

- Run flutter test --update--goldens <Give file path>
    This will not give us Text because Material fonts not loaded
    This is why loadAppFonts is used
    Pixel test failed: UI not matching

- Must generate test report